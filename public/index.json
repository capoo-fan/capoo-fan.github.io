
[{"content":"","date":"3 August 2025","externalUrl":null,"permalink":"/tags/c/cpp/","section":"Tags","summary":"","title":"C/Cpp","type":"tags"},{"content":"","date":"3 August 2025","externalUrl":null,"permalink":"/","section":"Capoo-fan","summary":"","title":"Capoo-fan","type":"page"},{"content":"","date":"3 August 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"3 August 2025","externalUrl":null,"permalink":"/categories/general/","section":"Categories","summary":"","title":"General","type":"categories"},{"content":"","date":"3 August 2025","externalUrl":null,"permalink":"/tags/plugin/","section":"Tags","summary":"","title":"Plugin","type":"tags"},{"content":"","date":"3 August 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"3 August 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"3 August 2025","externalUrl":null,"permalink":"/categories/vscode/","section":"Categories","summary":"","title":"Vscode","type":"categories"},{"content":"","date":"3 August 2025","externalUrl":null,"permalink":"/tags/vscode/","section":"Tags","summary":"","title":"Vscode","type":"tags"},{"content":"","date":"3 August 2025","externalUrl":null,"permalink":"/posts/vscode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/","section":"Posts","summary":"","title":"Vscode插件推荐","type":"posts"},{"content":" Vscode 配置教程 # 下载 vscode # vscode官方网址\n建议勾选全部选项，这会为你后续的开发提供极大的便利，例如直接在文件或文件夹上右键通过 Code 打开。”\n插件安装 # 点击 VS Code 侧边活动栏中的‘扩展’图标（通常是四个方块堆叠的形状），在打开的搜索框中搜索以下插件名并安装。。\nChinese (Simplified) (简体中文) ： 中文汉化 Tokyo Night ：主题插件 C/C++ Compile Run: 方便快速编译运行单文件 C/C++: 核心支持，提供代码高亮、智能感知等 Better C++ Syntax: 提供更精准的 C++ 语法高亮 Error Lens: 在代码行内直接显示错误和警告信息，非常直观。 Material Icon Theme: 提供更美观的图标主题 配置编译运行调试环境 # mingw-w64下载 # 下载网址\n在下载页面中，请找到 x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z 的链接点击进行下载 。\n如果下载速度过慢，可以点击页面的 \u0026ldquo;problem downloading?\u0026rdquo; 链接，选择不同的链接来更换下载源，速度会有不同。\n配置环境变量 # 解压文件：使用解压软件（如 7-Zip 或 windows自带的解压软件）将下载的 x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z 文件解压。 放置文件夹：解压后会得到一个名为 mingw64 的文件夹。将这个 mingw64 文件夹移动到一个不含中文或空格的稳定路径下，例如 C:\\ 或 D:\\。最终 bin 目录的路径类似于 C:\\mingw64\\bin。 复制路径：进入这个 bin 文件夹，并复制bin文件夹的完整路径。在 Windows 文件资源管理器的地址栏单击或者对着bin右键复制文件地址，即可获得该路径。 在 Windows 搜索框中搜索 “环境变量”，然后选择 “编辑系统环境变量”。\n在弹出的 “系统属性” 窗口中，点击 “环境变量(N)\u0026hellip;” 按钮。\n在下方的 “系统变量(S)” 区域，找到并双击名为 Path 的变量。\n在 “编辑环境变量” 窗口中，点击 “新建”，然后将你的编译器路径 (\u0026ldquo;C:\\Users\\ 你的用户名 \\x86_64-8.1.0-release-posix-seh-rt_v6-rev0\\mingw64\\bin\u0026rdquo;) 粘贴进去。\n一路点击 “确定” 保存所有设置。\n\u0026lsquo;Win+R\u0026rsquo; 打开运行窗口，输入 cmd 并回车，在输入框输入 g++ --version 检查是否安装成功。\n如果显示版本信息(有一段输出)，则表示安装成功。\n编译与调试 # 新建一个 \u0026rsquo;test\u0026rsquo; 文件夹,注意要在C/D盘创建，不要在桌面创建（原因后面会讲到），其中新建hello.cpp,粘贴以下代码作为测试\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a=1; cout\u0026lt;\u0026lt;a\u0026lt;\u0026lt;\u0026#34; hello,world\u0026#34;; return 0; } 然后在 test 文件夹下新建一个 \u0026ldquo;.vscode\u0026rdquo; 文件夹 新建 \u0026ldquo;tasks.json\u0026rdquo; 粘贴以下代码:\n{ \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;label\u0026#34;: \u0026#34;C/C++: g++.exe build active file\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;cppbuild\u0026#34;, // 关键：必须替换成你自己的 g++.exe 的完整路径！ // 示例：C:\\\\Users\\\\ABCD\\\\x86_64-8.1.0-release-posix-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\g++.exe \u0026#34;command\u0026#34;: \u0026#34;你的g++.exe的完整路径\u0026#34;, //g++.exe在mingw64/bin目录下,自行查找即可，复制文件地址过来是单斜杠会报错。自行按照示例改成双斜杠即可 \u0026#34;args\u0026#34;: [ \u0026#34;-fdiagnostics-color=always\u0026#34;, \u0026#34;-g\u0026#34;, // 生成调试信息 \u0026#34;${file}\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34; ], \u0026#34;options\u0026#34;: { \u0026#34;cwd\u0026#34;: \u0026#34;${fileDirname}\u0026#34; }, \u0026#34;problemMatcher\u0026#34;: [\u0026#34;$msCompile\u0026#34;], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true // 设置为默认构建任务 (Ctrl+Shift+B) }, \u0026#34;detail\u0026#34;: \u0026#34;compiler: 你的g++.exe的完整路径 \u0026#34;, //与上同理 } ] } 然后依旧在.vscode文件夹下新建 launch.json\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;(gdb) Launch C++ Debug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;cppdbg\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, \u0026#34;args\u0026#34;: [], \u0026#34;stopAtEntry\u0026#34;: false, \u0026#34;cwd\u0026#34;: \u0026#34;${fileDirname}\u0026#34;, \u0026#34;environment\u0026#34;: [], \u0026#34;externalConsole\u0026#34;: true, // 推荐true，程序会运行在独立的cmd窗口，输入输出更方便 \u0026#34;MIMode\u0026#34;: \u0026#34;gdb\u0026#34;, // 关键：必须替换成你自己的 gdb.exe 的完整路径！ \u0026#34;miDebuggerPath\u0026#34;: \u0026#34;你的gdb.exe完整路径\u0026#34;,// gdb.exe在mingw64/bin目录下,自行查找即可 \u0026#34;setupCommands\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;Enable pretty-printing for gdb\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;-enable-pretty-printing\u0026#34;, \u0026#34;ignoreFailures\u0026#34;: true }, { \u0026#34;description\u0026#34;: \u0026#34;Set Disassembly Flavor to Intel\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;-gdb-set disassembly-flavor intel\u0026#34;, \u0026#34;ignoreFailures\u0026#34;: true } ], // 关键：在启动调试前，自动执行 tasks.json 中定义的构建任务 \u0026#34;preLaunchTask\u0026#34;: \u0026#34;C/C++: g++.exe build active file\u0026#34; } ] } 编译 按下 \u0026lsquo;F6\u0026rsquo; 键，或者点击左侧栏的运行按钮，选择 \u0026ldquo;C/C++: g++.exe build active file\u0026rdquo;，这会编译当前打开的文件如果一切正常，你会看到输出 1 hello,world。\n调试 将鼠标移动到 第 5 行 int a=1; 的行号左侧，光标会变成一个小红点，单击鼠标左键，设置一个断点。 然后按下 F5 键，或者点击左侧栏的运行按钮，选择 \u0026ldquo;C++ (GDB) Launch\u0026rdquo;，程序会在独立的命令行窗口中运行。并且程序会在断点处暂停。\n问题排查 # 在环境变量导入正确的情况下，一般来说编译是不会有问题的。如果调试有问题，系统会提示你找不到 \u0026rsquo;lauch.json\u0026rsquo; 文件,此时要检查你的文件路径是否携带中文，比如 \u0026lsquo;hello.cpp\u0026rsquo; 和 创建的各种 .json 文件，对每一个文件复制一下文件地址然后找到一个地方粘贴即可查看是否有中文。例如你把 test 文件夹放在了桌面就会出问题。\n尾记 # 有人说 vscode 的 C/C++ 开发环境配置太麻烦了，为什么不直接用其他 IDE？其实我也试过其他的 IDE，像 Code::Blocks、Dev-C++ 等等，但总觉得不如 vscode 灵活。vscode 的插件生态非常丰富，而且界面简洁，操作流畅，适合各种开发需求。总吃开箱即用的\u0026quot;方便面\u0026quot;总是对身体不好的，自己花点时间配置一个适合自己的环境，既可以了解一些计算机的知识，又可以得到一个舒适的开发环境，何乐而不为。\n","date":"3 August 2025","externalUrl":null,"permalink":"/posts/vscode%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/","section":"Posts","summary":"","title":"Vscode配置教程","type":"posts"},{"content":" Arch linux 安装指南 # 前言 # 本文档主要内容源自 Arch Linux Wiki 和 Arch Linux Installation Guide，并经过了个人的整理和扩展，旨在为新手提供一个清晰的安装流程。本教程默认读者的电脑均为 UEFI 模式引导。下面正式开始教程。\n准备工作 # 制作启动盘 # 获取镜像文件。下面是在中国的镜像站，挑选一个就行，均可以公网访问。 清华大学开源软件镜像站 中科大开源软件镜像站 阿里云开源软件镜像站 华为云开源软件镜像站 南科大开源软件镜像站 制作启动盘 (win 环境) 选用 Rufus 制作启动盘。下载之后，选择已经下载好的镜像文件，保持默认选项即可，点击 \u0026ldquo;开始\u0026rdquo; , 选择 DD 模式 ，就会开始烧录 。 注意：制作启动盘会清空 U 盘上的所有数据，请提前备份。 磁盘分区 # 读者的电脑初始应该是自带 windows 系统的，可以在 windows 上为 Arch Linux 预留一个分区（假如你想使用双系统的话）。\n按下 Win + X 键，然后选择“磁盘管理”。 在磁盘管理中，找到你想要分区的磁盘，右键点击该磁盘，选择“压缩卷”。 系统会计算可压缩的空间。在“输入要压缩的空间量”处，输入你希望为 Arch Linux 准备的空间大小。例如，如果你想给 Arch 留出 100GB，就输入 102400 。 点击“压缩”后，你会看到磁盘图表中出现了一块黑色的“未分配”空间。 这一部分就可以作为 Arch Linux 的安装分区。 正式安装 # 启动到 live 环境 # 进入 bios 设置 ，将安全启动关闭，否则会启动失败 进入 bios 设置，将启动顺序调整为 USB 启动优先 保存设置并重启电脑，选择 Arch Linux install medium 进入 live 环境 验证引导模式 # cat /sys/firmware/efi/fw_platform_size 如果命令结果为 64，则系统是以 UEFI 模式引导且使用 64 位 x64 UEFI。 连接网络 （Wifi） # 进入 iwd 命令行界面，输入: iwctl 查看网络设备名称 device list 假设网络设备名称为 wlan0，输入以下命令扫描可用的 Wi-Fi 网络： station wlan0 scan 查看可用的 Wi-Fi 网络列表： station wlan0 get-networks 连接到 Wi-Fi 网络，假设网络名称为 MyNetwork： station wlan0 connect MyNetwork 然后密码会提示输入，输入密码后按回车。\n连接好后，就可以返回： exit 验证网络连接是否成功： ping -c 3 archlinux.org 如果能看到类似 64 bytes from ... 的输出，说明网络连接成功。\n注意: 如果 wifi 名称携带中文，由于命令行无法输入中文，所以无法直接连接，可以通过wifi名称的 UTF-8 编码来连接。\n更新系统时间 # 使用 timedatectl(1) 确保系统时间是同步的：\ntimedatectl 磁盘分区 # 输入\nfdisk -l (此处为小写字母l) 你将会看到类似这样的输出： 其中你可以看到 nvme0n1 是你的硬盘设备名称，nvme0n1p1 是你的第一个分区和你的 windows 系统中的 CD 盘和你已经分好的 Arch linux 分区。\n假设你操作的硬盘是 /dev/nvme0n1 ，你可以使用以下命令操作硬盘：\nfdisk /dev/nvme0n1 输入 p 查看现有分区，确认 Windows 的分区都在。\n输入 n 开始创建新分区（它会自动在未分配空间中开始）。\n创建 Swap 分区: (假设需要 16GB)\n输入 n，回车 分区号、起始扇区按回车 Last sector, 输入 +16G ，回车 输入 t ，回车，选择新创建的分区号 输入 19 (选择 Linux swap)，回车 创建根 / 分区:\n输入 n，回车 分区号、起始扇区按回车 Last sector, 直接回车 (使用所有剩余空间) 保存与推出\n输入 p 检查分区表是否正确，有无误删 windows 分区 仔细确认没有误删 Windows 的分区后，输入 w 保存退出。 假设新创建的分区是 /dev/nvme0n1p4 (Swap) 和 /dev/nvme0n1p5 (根)。 进行如下操作:\n# 初始化 Swap 分区 mkswap /dev/nvme0n1p4 # 格式化根分区为 ext4 mkfs.ext4 /dev/nvme0n1p5 # 挂载根分区 mount /dev/nvme0n1p5 /mnt # 启用 Swap swapon /dev/nvme0n1p4 # 挂载 Windows 的 EFI 分区 , Arch linux与 Windows 共用 EFI 分区 # 假设 EFI 分区是 /dev/nvme0n1p1 mkdir -p /mnt/boot mount /dev/nvme0n1p1 /mnt/boot # 注意：是 p1，并且不要格式化它！ 安装基本系统 # 下面的内容可以直接参考 Arch Linux Installation Guide ，可以直接从 开始安装系统 处阅读\n安装后的工作 KDE+Wayland # 当你重启之后，从 grub 菜单中选择 Arch Linux 进入系统。 你会看到一个命令行界面，这时候你需要安装图形界面。\n创建非特权账户 useradd -m -G wheel \u0026lt;username\u0026gt; # 替换 \u0026lt;username\u0026gt; 为你的用户名 passwd your_username # 输入密码 安装基础的编辑器 vim / nano\nsudo pacman -S vim nano 安装 sudo 同时编辑 sudoers 文件\npacman -S sudo vim /etc/sudoers # :wq! 强制退出 在打开的文件中，找到下面这一行并取消注释（删除行首的 #）：\n%wheel ALL=(ALL:ALL) ALL 然后就可以输入 exit 退出 root 用户，使用新创建的用户登录了。\n安装图形界面 KDE Plasma sudo pacman -S plasma plasma-wayland-session # 安装 KDE Plasma 和 Wayland 会话 sudo pacman -S kde-applications-meta # KDE 全家桶 sudo pacman -S sddm # 安装 SDDM 显示管理器 sudo systemctl enable sddm.service sudo pacman -S mesa # 安装 Mesa 图形驱动 sudo pacman -S nvidia nvidia-utils nvidia-settings # 如果你的电脑是 NVIDIA 显卡 然后就可以重启电脑，进入 KDE Plasma 桌面环境了。\n配置 archlinuxcn multilib # sudo vim /etc/pacman.conf # 打开 pacman 配置文件 在文件末尾添加以下内容：\n[archlinuxcn] Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch #换成你选择的镜像站 找到这两行取消注释\n#[multilib] #Include = /etc/pacman.d/mirrorlist 然后保存退出。 接下来更新系统并安装 archlinuxcn 的密钥：\nsudo pacman -Syu # 更新系统 sudo pacman -S archlinuxcn-keyring # 安装 archlinuxcn 的密钥 sudo pacman -Syu # 再次更新系统 安装包助手 paru # sudo pacman -S --needed base-devel git clone https://aur.archlinux.org/paru.git cd paru makepkg -si 安装常用软件 # paru -S firefox # Firefox 浏览器 paru -S google-chrome # Chromium 浏览器 paru -S visual-studio-code-bin # Visual Studio Code paru -S fcitx5 fcitx5-configtool # Fcitx5 输入法 paru -S fcitx5-chinese-addons # Fcitx5 中文输入法 paru -S fcitx5-pinyin-zhwiki # Fcitx5 中文词库 paru -S fcitx5-gtk fcitx5-qt # Fcitx 为了让系统和应用能调用输入法，需要设置环境变量。编辑/etc/environment 文件。 在文件中加入以下三行：\nGTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx 软件列表（自用） # 浏览器: Google Chrome (AUR) 编辑器: Visual-Studio-Code(AUR) , Neovim 终端: WezTerm 输入法: Fcitx5 通讯 : linuxqq, WeChat, Telegram vpn: clash-verge 编辑: wps-office Shell : zsh\u0026amp;\u0026amp;fish 文件管理: Dolphin ","date":"4 July 2025","externalUrl":null,"permalink":"/posts/arch-linux-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/","section":"Posts","summary":"","title":"Arch linux 安装指南","type":"posts"},{"content":"","date":"4 July 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"4 July 2025","externalUrl":null,"permalink":"/tags/operating-system/","section":"Tags","summary":"","title":"Operating System","type":"tags"},{"content":"","date":"18 June 2025","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":" Blowfish的小tip # 背景与封面图片 # 如果想给文章加上封面和背景，然后两张图片分开的话，需要: 在你的文章同一目录下，将背景图片 命名为 background.png，封面图片命名为 feature.png。\ngtihub action # 用 github action 构建 github pages 只需要将 theme/blowfish 下 .github 文件复制出来即可，但是原文件直接上传可能会引起错误，要把文件复制出来后，把 test.yml 和 pages.yml 删除，就不会遇到错误。\n","date":"18 June 2025","externalUrl":null,"permalink":"/posts/tips-about-blowfish/","section":"Posts","summary":"","title":"Tips about blowfish","type":"posts"},{"content":"","date":"18 June 2025","externalUrl":null,"permalink":"/categories/web/","section":"Categories","summary":"","title":"Web","type":"categories"},{"content":" Awesome Collections # 本博客致力于收集一些有用的工具和资源，以下是一些精选的集合：\nCourses # websites # Funny Tools # ","date":"17 June 2025","externalUrl":null,"permalink":"/posts/awesome-collections/","section":"Posts","summary":"","title":"Awesome Collections","type":"posts"},{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"Github","type":"tags"},{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/categories/life/","section":"Categories","summary":"","title":"Life","type":"categories"},{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/tags/school/","section":"Tags","summary":"","title":"School","type":"tags"},{"content":" 2024秋季学期 # 微积分A # 授课老师：杨国俅\n评价:杨国俅老师算是哈工深最好的老师之一了，上课很风趣，讲课讲的知识点很透彻，然后杨国俅基本不点名，点名了也基本不记录（单纯应付上面的）。最重要的给分呢，只要是作业按时提交，没有其他问题，平时分基本都满分，而且如果你期末和期中考的都非常好，一般平时分都给满的。\n网课资源\n梨米特 个人人呢为比宋浩讲得好，每节课有知识点讲解和习题讲解。 数学竞赛 这个即使不学数学竞赛也可以看，里面有很多进阶技巧，适合考研或者想取得高分的同学。 线性代数 # 授课老师：李文彬\n评价:没有签到，作业全交平时分基本给满\n网课资源\n梨米特 讲的很详细，适合自学。 程设 # 授课老师：陈清财\n评价:点名方式是某个小程序的定位签到，需要每次走到教学楼附近签到。\n体育（羽毛球） # 授课老师：许坤\n评价:许坤老师这个人上课很有趣，但是由于你深球类课一贯的特点，你基本上是学不到什么羽毛球技术的，所以推荐有一定基础的人选，会正手发球，有一定就可以，上起来就非常轻松，不会出现难以及格的情况。\n习概 # 授课老师：范秀娟\n评价:点名很少，一般都是雨课堂签到，有同学协助可以翘课，平时分就是正常水平，不高也不低。\n2024春季学期 # 微积分B # 授课老师：杨国俅\n评价:这学期因为教学评估得缘故，杨国俅点名次数增多，但是似乎不会记录，而且也允许补签，所以基本不用担心，最后平时分基本给满。\n大学物理A # 授课老师 ： 马永辉\n评价:马永辉点名次数很频繁，每次点名挑选一个班全点，点到一次完完整整扣一分平时分。但是允许下课之后去补签，一般不会为难你。然后平时分还有一个重要组成是作业，作业一定要交。前面两样全做到平时分满分。\n近代史 # 授课老师 ： 刘晓旭\n评价:上课前会有雨课堂签到，同时上课会有雨课堂答题，然后唯一一次点名是在期中展示的时候，每展示完一个组就会点完一个组的名。平时分属于近代史老师偏高的一档。\n三合一 # 授课老师 ：吴婷（模电） 孙丽（电路）\n评价：平时没有时间点名，平时分看考试情况而定（海底捞）。\n大学物理实验 # 授课老师：无\n评价：要自己抢课，选够22个学分，hoa上有现成的实验报告的对照，可以速通。\n三合一实验 # 授课老师：无\n评价：学校会安排课表，但是不像物理实验，hoa上没有模板对照，要想速通只能依靠自己的动手能力，或者祈祷你不是第一批做，然后向先做的同学寻求经验。\n体育 （健身街舞） # 授课老师：刘宏辉\n评价：老师人非常好，每节课可以迟到十五分钟，还有课间休息玩手机时间。考试内容只需要做两套操，跟着别人也可以，考试及格很简单。唯一的缺点就是动作有些尴尬，做操有点无聊。\n","date":"17 June 2025","externalUrl":null,"permalink":"/posts/%E5%93%88%E5%B7%A5%E6%B7%B1%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/","section":"Posts","summary":"","title":"哈工深课程总结","type":"posts"},{"content":" 前言 # 对于 github 的其他仓库，本身体积不大，可以直接 clone 到本地进行编辑并且推送上去，但是hoa.moe的仓库体积比较大，如果直接 clone 到本地，不仅需要花费大量的时间，而且还需要大量的磁盘空间，所以我们需要一种更加简单的方法来编辑 hoa.moe 的仓库\n这里有一种依赖一个插件，直接在vsc上编辑的方法，此方法打开hoa.moe的速度大概在三四秒左右(魔法状态下)，然后可以直接编辑，编辑完成后直接push到远程仓库，不需要任何其他操作.\n操作流程 # 将仓库fork到自己的github账号下\n下载GitHub Repositories插件\n打开GitHub Repositories插件，并登录自己的帐号 编辑完成后，就可以在vsc上进行push，然后就可以回到 github帐号下进行pr 了 总结 # 这个方法是笔者在读vscode官方文档时发现出来的方法，很简便且易于操作，在这里分享给大家.同时也推荐大家多读官方文档或者 github 下面的 REAMED.md ，往往会有意想不到的收获\n","date":"17 June 2025","externalUrl":null,"permalink":"/posts/%E8%BF%9C%E7%A8%8B%E7%BC%96%E8%BE%91hoa.moe/","section":"Posts","summary":"","title":"远程编辑hoa.moe","type":"posts"},{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/pages/","section":"Pages","summary":"","title":"Pages","type":"pages"},{"content":" Friends # 亮亮 cc IcyDesert 寒金 Website Lists # hoa.moe HITSZ 自动化课程攻略共享计划 opencs 哈工大（深圳）计算机专业课程攻略 Hitsz-osa HITSZ 开源技术协会 Wiki Group Lists # HITSZ开源技术协会：811633021 （QQ） 华科开源俱乐部: 554359007 （QQ） ","date":"17 June 2025","externalUrl":null,"permalink":"/pages/friends/","section":"Pages","summary":"","title":"潜伏的朋友们","type":"pages"},{"content":" 潜伏的个人介绍 # Welcome to my digital garden! 🌱\nSelf Intro 😉 # I\u0026rsquo;m 潜伏, currently studying in Harbin Institute of Technology(Shen Zhen).\n🔭 I’m currently working on C++/Javascript/Python/Typst 🌱 I’m currently learning Python 💬 Ask me about Linux/Full-Stack/Python GitHub Stats 💡 # Contact Me 📫 # 邮箱：qianfu46@gmail.com GitHub：github.com/capoo-fan GitHub Activity Graph 📈 # ","date":"15 June 2025","externalUrl":null,"permalink":"/pages/about/","section":"Pages","summary":"","title":"About Me","type":"pages"},{"content":" React # ","date":"15 June 2025","externalUrl":null,"permalink":"/posts/null/","section":"Posts","summary":"","title":"null","type":"posts"},{"content":" My First Post # This is my first post on this blog. I am excited to share my thoughts and experiences with everyone.\nIntroduction # Welcome to my blog! This is where I will be documenting my journey, sharing insights, and connecting with like-minded individuals.\nWhat to Expect # In this blog, you can expect to find a variety of topics including:\nPersonal development Technology trends Travel experiences Book reviews Lifestyle tips And much more! Join the Conversation # I encourage you to join the conversation by leaving comments, sharing your thoughts, and engaging with the content. Your feedback is valuable and helps create a vibrant community.\nConclusion # Thank you for stopping by my blog. I look forward to sharing more posts with you in the future. Stay tuned for more updates and exciting content!\nAbout Me # I am a passionate writer, traveler, and lifelong learner. I believe in the power of storytelling and the impact it can have on people\u0026rsquo;s lives. Through this blog, I hope to inspire and connect with others who share similar interests.\n","date":"15 June 2025","externalUrl":null,"permalink":"/posts/my-first-post/","section":"Posts","summary":"","title":"My First Post","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]